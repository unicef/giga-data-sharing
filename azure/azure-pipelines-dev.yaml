trigger:
  branches:
    include:
      - main

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistryName: $(ACR_NAME)
  containerRegistryServiceConnection: $(ACR_SERVICE_CONNECTION)
  kubernetesServiceConnection: $(KUBERNETES_SERVICE_CONNECTION)
  kubernetesNamespace: $(KUBERNETES_NAMESPACE)
  deltaBearerToken: $(DELTA_BEARER_TOKEN)
  sasToken: $(SAS_TOKEN)
  storageAccessKey: $(STORAGE_ACCESS_KEY)
  storageAccountName: $(STORAGE_ACCOUNT_NAME)
  storageContainerName: $(STORAGE_CONTAINER_NAME)
  system.debug: true

steps:
  - task: Docker@2
    displayName: Login to container Registry
    inputs:
      command: login
      containerRegistry: $(containerRegistryServiceConnection)

  - task: Docker@2
    displayName: Build and push Data Sharing proxy image to container registry
    inputs:
      command: buildAndPush
      repository: giga-data-sharing-proxy
      dockerfile: $(Build.SourcesDirectory)/proxy.prod.Dockerfile
      containerRegistry: $(containerRegistryServiceConnection)
      tags: |
        $(Build.SourceVersion)

  - task: Docker@2
    displayName: Build and push Data Sharing Delta image to container registry
    inputs:
      command: buildAndPush
      repository: giga-data-sharing-delta
      dockerfile: $(Build.SourcesDirectory)/delta.prod.Dockerfile
      containerRegistry: $(containerRegistryServiceConnection)
      tags: |
        $(Build.SourceVersion)

  - task: Kubernetes@1
    displayName: Create configmap
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      configurationType: configuration
      command: apply
      useConfigurationFile: true
      configuration: $(Build.SourcesDirectory)/infra/k8s/configmap.yaml

  - task: Kubernetes@1
    displayName: Create secret
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      configurationType: inline
      command: apply
      useConfigurationFile: true
      inline: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: giga-data-sharing
          labels:
            app: giga-data-sharing
        stringData:
          DELTA_BEARER_TOKEN: $(deltaBearerToken)
          SAS_TOKEN: $(sasToken)
          STORAGE_ACCESS_KEY: $(storageAccessKey)
          STORAGE_ACCOUNT_NAME: $(storageAccountName)
          CONTAINER_NAME: $(storageContainerName)

  - task: HelmDeploy@0
    displayName: Helm deploy Data Sharing Delta
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: upgrade
      chartType: FilePath
      chartPath: infra/helm/data-sharing-delta
      releaseName: data-sharing-delta
      namespace: $(kubernetesNamespace)
      arguments: >
        --set image.repository="$(containerRegistryName).azurecr.io/giga-data-sharing-delta"
        --set image.tag="$(Build.SourceVersion)"

  - task: HelmDeploy@0
    displayName: Helm deploy Data Sharing proxy
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: upgrade
      chartType: FilePath
      chartPath: infra/helm/data-sharing-proxy
      releaseName: data-sharing-proxy
      namespace: $(kubernetesNamespace)
      arguments: >
        --set image.repository="$(containerRegistryName).azurecr.io/giga-data-sharing-proxy"
        --set image.tag="$(Build.SourceVersion)"
        --set ingress.enabled=true
