version: '3'

dotenv:
  - .env

vars:
  PROJECT_NAME: giga-dataops_data-sharing
  SHORT_SHA:
    sh: git rev-parse --short HEAD

tasks:
  default:
    desc: Build and start Docker containers
    cmds:
      - task: config
      - docker compose --project-name giga-dataops-platform --file docker-compose-network.yaml up --detach --build --remove-orphans {{.CLI_ARGS}}
      - docker compose --project-name {{.PROJECT_NAME}} up --detach --build --remove-orphans {{.CLI_ARGS}}

  setup:
    desc: Run initial setup
    cmds:
      - task: setup-pre-commit
      - task: setup-python

  setup-pre-commit:
    internal: true
    desc: Install pre-commit hooks
    cmds:
      - pip install -U pre-commit
      - pre-commit install --install-hooks -t pre-commit -t commit-msg

  setup-python:
    internal: true
    desc: Setup Python dependencies
    cmds:
      - poetry env use 3.11
      - poetry install

  config:
    desc: Generate config files
    sources:
      - ./conf-template/*
      - ./.env
    generates:
      - ./conf/*
    cmds:
      - mkdir -p conf
      - >
        sed -e 's|{{`{{.STORAGE_ACCESS_KEY}}`}}|{{.STORAGE_ACCESS_KEY}}|'
        -e 's|{{`{{.STORAGE_ACCOUNT_NAME}}`}}|{{.STORAGE_ACCOUNT_NAME}}|'
        conf-template/core-site.xml > conf/core-site.xml
      - >
        sed -e 's!{{`{{.DELTA_BEARER_TOKEN}}`}}!{{.DELTA_BEARER_TOKEN}}!'
        -e 's!{{`{{.STORAGE_ACCOUNT_NAME}}`}}!{{.STORAGE_ACCOUNT_NAME}}!'
        -e 's!{{`{{.CONTAINER_NAME}}`}}!{{.CONTAINER_NAME}}!'
        conf-template/delta-sharing-server.yaml > conf/delta-sharing-server.yaml

  logs:
    desc: Attach to Docker logs
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} logs --follow {{.CLI_ARGS}}

  stop:
    desc: Stop containers
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} stop {{.CLI_ARGS}}

  restart:
    desc: Restart containers
    cmds:
      - task: config
      - docker compose --project-name {{.PROJECT_NAME}} restart {{.CLI_ARGS}}

  exec:
    desc: Run a command in the specified container
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} exec {{.CLI_ARGS}}

  clean:
    desc: Remove containers
    cmds:
      - docker compose --project-name {{.PROJECT_NAME}} down --volumes --remove-orphans {{.CLI_ARGS}}
      - docker compose --project-name giga-dataops-platform --file docker-compose-network.yaml down --volumes --remove-orphans {{.CLI_ARGS}}

  build-and-push:
    desc: Build and push Docker image
    cmds:
      - task: build
      - task: push

  build:
    internal: true
    desc: Build Docker image
    cmds:
      - docker build --tag {{.DATA_SHARING_PROXY_IMAGE_REPOSITORY}}:{{.SHORT_SHA}} -f proxy.prod.Dockerfile .
      - docker build --tag {{.DATA_SHARING_DELTA_IMAGE_REPOSITORY}}:{{.SHORT_SHA}} -f delta.prod.Dockerfile .

  push:
    internal: true
    desc: Push Docker image
    cmds:
      - docker push {{.DATA_SHARING_PROXY_IMAGE_REPOSITORY}}:{{.SHORT_SHA}}
      - docker push {{.DATA_SHARING_DELTA_IMAGE_REPOSITORY}}:{{.SHORT_SHA}}

  helm-up:
    desc: Install/upgrade Helm chart
    dir: infra
    cmds:
      - kubectl apply -f k8s/configmap.yaml
      - kubectl apply -f k8s/secrets.yaml
      - helm dependency update helm/data-sharing-proxy
      - >
        helm upgrade --install data-sharing-delta ./helm/data-sharing-delta
        --set image.repository={{.DATA_SHARING_DELTA_IMAGE_REPOSITORY}}
        --set image.tag={{.SHORT_SHA}}
      - >
        helm upgrade --install data-sharing-proxy ./helm/data-sharing-proxy
        --set image.repository={{.DATA_SHARING_PROXY_IMAGE_REPOSITORY}}
        --set image.tag={{.SHORT_SHA}}
        --set service.type=LoadBalancer

  helm-down:
    desc: Uninstall Helm chart
    dir: infra/helm
    cmds:
      - helm uninstall data-sharing-proxy
      - helm uninstall data-sharing-delta
      - kubectl delete all --all
      - kubectl delete pvc --all

  generate-delta-config:
    desc: Generate Delta Sharing config
    cmds:
      - task exec -- proxy python -m scripts.generate_delta_config

  makemigrations:
    desc: Generate database migrations
    cmds:
      - task exec -- proxy alembic revision --autogenerate -m "{{.CLI_ARGS}}"

  migrate:
    desc: Run database migrations
    cmds:
      - task exec -- proxy alembic upgrade head

  psql:
    desc: Connect to database
    cmds:
      - task exec -- db psql -U {{.POSTGRESQL_USERNAME}} -d {{.POSTGRESQL_DATABASE}}

  load-fixtures:
    desc: Install database fixtures
    cmds:
      - task exec -- proxy python -m scripts.load_fixtures {{.CLI_ARGS}}
